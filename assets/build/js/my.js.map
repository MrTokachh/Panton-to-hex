{"version":3,"names":[],"mappings":"","sources":["my.js"],"sourcesContent":["'use strict'\r\n\r\njQuery(document).ready(function () {\r\n  initColor();\r\n  pantoneToHexDrop();\r\n  hexToPantoneDrop();\r\n});\r\n\r\nfunction initColor() {\r\n  $('.colorpick').colorpickle({\r\n    showHex: false,\r\n    showSwatch: false,\r\n    onChange: function () {\r\n      $('.colorpick').each(function () {\r\n        var hexInput = $(this).closest('.converter').find('.hex');\r\n        var hexVal = $(this).data(\"colorpickle\").hex\r\n        $(this).closest('.converter').find('.converter-color').css('backgroundColor', hexVal);\r\n        hexInput.val(hexVal.substr(1));\r\n\r\n        var hexA = hexInput.val();\r\n        var p = 16;\r\n        var m = colorMatch(hexA, p);\r\n        var m2 = m[0];\r\n\r\n        if (m2 != '') {\r\n          $(this).closest('.converter').find('.pantone').val(m2);\r\n        }\r\n      })\r\n    }\r\n  });\r\n}\r\n\r\nfunction colorMatch(rgb, distance) {\r\n  distance = 16;\r\n  if (!distance) distance = 16;\r\n  var a = new Array();\r\n  var aDisVal = new Array();\r\n  var m = RGB2PMS(rgb);\r\n  if (m != '') {\r\n    a[0] = m;\r\n  }\r\n  var r = parseInt((rgb[0] + rgb[1]), 16);\r\n  var g = parseInt((rgb[2] + rgb[3]), 16);\r\n  var b = parseInt((rgb[4] + rgb[5]), 16);\r\n\r\n  for (var i = 0; i < hexArray.length; i++) {\r\n    var rgb1 = hexArray[i];\r\n    var r1 = parseInt((rgb1[0] + rgb1[1]), 16);\r\n    var g1 = parseInt((rgb1[2] + rgb1[3]), 16);\r\n    var b1 = parseInt((rgb1[4] + rgb1[5]), 16);\r\n    aDisVal[i] = Math.sqrt(Math.pow((r - r1), 2) + Math.pow((g - g1), 2) + Math.pow((b - b1), 2));\r\n  }\r\n  for (var i = 0; i < aDisVal.length; i++) {\r\n    if (aDisVal[i] <= distance) {\r\n      if (a.indexOf(pmsArray[i]) == -1) {\r\n        a.push(pmsArray[i]);\r\n      }\r\n    }\r\n  }\r\n  return a;\r\n}\r\n\r\nfunction RGB2PMS(rgb) {\r\n  var i = hexArray.indexOf(rgb);\r\n  if (i >= 0) {\r\n    return pmsArray[i];\r\n  } else {\r\n    return '';\r\n  }\r\n}\r\n\r\nfunction PMS2RGB(pms) {\r\n  var i = pmsArray.indexOf(pms);\r\n  if (i >= 0) {\r\n    return hexArray[i];\r\n  } else {\r\n    return '';\r\n  }\r\n}\r\n\r\nfunction pantoneToHexDrop() {\r\n  $('.pantone').on('change keyup', function () {\r\n    var pantone = $(this).val();\r\n    $(this).closest('.converter').find('.hex').val(hexArray[pmsArray.indexOf(pantone)]);\r\n  });\r\n}\r\n\r\nfunction hexToPantoneDrop() {\r\n  $('.hex').on('change keyup', function () {\r\n    var hex = $(this).val();\r\n    var p = 16;\r\n    var m = colorMatch(hex, p);\r\n    var m2 = m[0];\r\n\r\n    $(this).val(hex.replace(/[^a-z0-9]/gi, ''));\r\n\r\n    if (m2 != '') {\r\n      $(this).closest('.converter').find('.pantone').val(m2);\r\n    }\r\n  });\r\n}"],"file":"my.js"}