{"version":3,"names":[],"mappings":"","sources":["jquery.colorpickle.js"],"sourcesContent":["/**\n * jQuery Colorpickle plugin\n *\n * @copyright   2016 Hape Haavikko\n * @author      Hape Haavikko <hape.haavikko@fakiirimedia.com>\n * @version     1.0.0\n */\n;(function ( $, window, document, undefined ) {\n    \n    $.colorpickle = function(element, options) {\n        \n        // Default settings overwritten by options if given\n        var defaults = {\n            \"clickToggle\": false,\n            \"closeOnOk\": false,\n            \"closeOnCancel\": false,\n            \"draggable\": false,\n            \"hex\": null,\n            \"hsl\": null,\n            \"hslSliders\": true,\n            \"modal\": false,\n            \"mode\": \"hex\",\n            \"onCancel\": null,\n            \"onChange\": null,\n            \"onInit\": null,\n            \"onOk\": null,\n            \"onTop\": false, \n            \"rgb\": [255, 140, 60],\n            \"rgbSliders\": true,\n            \"showCancel\": false,\n            \"showHex\": true,\n            \"showOk\": false,\n            \"showSLGradient\": true,\n            \"showSwatch\": true,\n            \"textCancel\": \"Cancel\",\n            \"textOk\": \"Ok\",\n            \"theme\": null,\n            \"visible\": true,\n            \"width\": null\n        };\n        \n        var r;\n        var g;\n        var b;\n        var hex;\n        var hsl;\n        var h;\n        var s;\n        var l;\n        var v;\n        \n        var instance = $(\"div.colorpickle\").length + 1;\n        var instanceId = \"colorpickle\" + instance;\n        var picking = false;\n        \n        // References to RGB and HSL slider wrapper divs\n        var rWrapper = \"#\" + instanceId + \" .rWrapper\";\n        var gWrapper = \"#\" + instanceId + \" .gWrapper\";\n        var bWrapper = \"#\" + instanceId + \" .bWrapper\";\n        var hWrapper = \"#\" + instanceId + \" .hWrapper\";\n        var sWrapper = \"#\" + instanceId + \" .sWrapper\";\n        var lWrapper = \"#\" + instanceId + \" .lWrapper\";\n        \n        // References to RGB and HSL sliders (range type inputs)\n        var redSlider = \"#\" + instanceId + \" .r\";\n        var greenSlider = \"#\" + instanceId + \" .g\";\n        var blueSlider = \"#\" + instanceId + \" .b\";\n        var hueSlider = \"#\" + instanceId + \" .h\";\n        var saturationSlider = \"#\" + instanceId + \" .s\";\n        var lightnessSlider = \"#\" + instanceId + \" .l\";\n        \n        // References to slider backgrounds (gradients)\n        var redSliderBg = \"#\" + instanceId + \" .rWrapper .sliderBg\";\n        var greenSliderBg = \"#\" + instanceId + \" .gWrapper .sliderBg\";\n        var blueSliderBg = \"#\" + instanceId + \" .bWrapper .sliderBg\";\n        var hueSliderBg = \"#\" + instanceId + \" .hWrapper .sliderBg\";\n        var saturationSliderBg = \"#\" + instanceId + \" .sWrapper .sliderBg\";\n        var lightnessSliderBg = \"#\" + instanceId + \" .lWrapper .sliderBg\";\n        \n        // References to RGB and HSL value inputs\n        var rInput = \"#\" + instanceId + \" .rInput\";\n        var gInput = \"#\" + instanceId + \" .gInput\";\n        var bInput = \"#\" + instanceId + \" .bInput\";\n        var hInput = \"#\" + instanceId + \" .hInput\";\n        var sInput = \"#\" + instanceId + \" .sInput\";\n        var lInput = \"#\" + instanceId + \" .lInput\";\n        \n        var colorPickerWrapper = \"#\"+instanceId+\" .colorPickerWrapper\";\n        var colorPickerBg = \"#\"+instanceId+\" .colorPickerBg\";\n        var colorPicker = \"#\"+instanceId+\" .colorPicker\";\n        var colorPickerIndicator = \"#\"+instanceId+\" .colorPickerIndicator\";\n        var colorPickerIcon = \"#\" + instanceId + \"Icon\";\n        var swatch = \"#\"+instanceId+\" .swatch\";\n        \n        var plugin = this;\n        \n        /**\n         * This will hold the merged default and user-provided options\n         * Properties will be available through this object like:\n         * plugin.settings.propertyName from inside the plugin\n         */\n        plugin.settings = {};\n        \n        // Reference to the jQuery version of DOM element\n        var $element = $(element);\n        \n        // Reference to the actual DOM element\n        var el = element;    \n        \n        // The constructor method that gets called when the object is created\n        plugin.init = function() {\n            \n            // Merged default and user-provided options (if given)\n            plugin.settings = $.extend({}, defaults, options);\n            \n            // Public properties accessed via element.data('colorpickle').propertyName\n            plugin.rgb = null;\n            plugin.hsl = null;\n            plugin.hex = null;\n            \n            if ($element.is(\"div\"))\n            {\n                // Insert colorpicker in the div used to invoke the colorpicker\n                $(el).append('<div id=\"' + instanceId + '\" class=\"colorpickle\"></div>');\n            }\n            else\n            {\n                // If not a div (input for example) insert colorpicker after the element used to invoke the colorpicker\n                if (plugin.settings.modal == true) \n                {\n                    // Put modal picker to the end of body\n                    $(\"body\").append('<div id=\"' + instanceId + '\" class=\"colorpickle\"></div>');\n                } \n                else \n                {\n                    $('<div id=\"' + instanceId + '\" class=\"colorpickle\"></div>').insertAfter($element);\n                }\n                \n                $('<button type=\"button\" id=\"' + instanceId + 'Icon\" class=\"colorPickerIcon\">&nbsp;</button>').insertAfter($element);\n            }\n            \n            if (plugin.settings.theme != null)\n            {\n                $(\"#\" + instanceId).addClass(\"colorpickle-theme-\" + plugin.settings.theme);\n            }\n            \n            if ($element.is(\"input\"))\n            {\n                $(el).keypress(function () { return false; });\n            }\n            \n            if (plugin.settings.onTop == true)\n            {\n                $(\"#\"+instanceId).addClass(\"colorpickleOnTop\");\n            }\n            \n            if (plugin.settings.width != null)\n            {\n                $(\"#\"+instanceId).css(\"width\", plugin.settings.width);\n            }\n            \n            // Drag handle\n            if (plugin.settings.draggable == true)\n            {\n                $(\"#\"+instanceId).append('<div class=\"dragHandle\"></div>');\n                \n                $(\"#\"+instanceId+\" .dragHandle\").mousedown(function(e) {\n                    \n                    var parentOffset = $(this).parent().offset();\n                    var relX = e.pageX - parentOffset.left;\n                    var relY = e.pageY - parentOffset.top;\n                    \n                    $(\"body\").mousemove(function(e) {\n                        $(\"#\"+instanceId).offset({\n                            top: e.pageY - relY,\n                            left: e.pageX - relX\n                        });\n                    });\n                    \n                    $(\"body\").css(\"cursor\", \"move\");\n                });\n                \n                $(\"body\").mouseup(function() {\n                    $(\"body\").off(\"mousemove\");\n                    $(\"body\").css(\"cursor\", \"default\");\n                });\n            }\n            \n            if (plugin.settings.hex != null) \n            {\n                hex = plugin.settings.hex;\n                var rgbTemp = hexToRgb(plugin.settings.hex);\n                plugin.settings.rgb[0] = rgbTemp.r;\n                plugin.settings.rgb[1] = rgbTemp.g;\n                plugin.settings.rgb[2] = rgbTemp.b;\n            }\n            \n            createSlider('r', 0, 255, plugin.settings.rgb[0]);\n            createSlider('g', 0, 255, plugin.settings.rgb[1]);\n            createSlider('b', 0, 255, plugin.settings.rgb[2]);\n            \n            createSlider('h', 0, 360, 50);\n            createSlider('s', 0, 100, 50);\n            createSlider('l', 0, 100, 50);\n            \n            if (plugin.settings.hsl != null) \n            {\n                $(hueSlider).val(plugin.settings.hsl[0]);\n                $(saturationSlider).val(plugin.settings.hsl[1]);\n                $(lightnessSlider).val(plugin.settings.hsl[2]);\n                setHSL();\n            }\n            \n            $(\"#\"+instanceId).append('<div class=\"colorPickerWrapper\"></div>');\n            $(colorPickerWrapper).append('<div class=\"colorPickerBg\"></div>');\n            $(colorPickerWrapper).append('<div class=\"colorPicker\"><div class=\"gradientTp2White\"></div><div class=\"gradientTp2Black\"></div></div>');\n            $(colorPickerWrapper).append('<div class=\"colorPickerIndicator\"></div>');\n            \n            $(\"#\"+instanceId).append('<div class=\"clear\"></div>');\n            \n            $(\"#\"+instanceId).append('<div class=\"swatchHex\"></div>');\n            $(\"#\"+instanceId+\" .swatchHex\").append('<div class=\"swatch\"></div>');\n            $(\"#\"+instanceId+\" .swatchHex\").append('<input type=\"text\" class=\"hexValue\" name=\"hexValue\" maxlength=\"7\" />');\n            \n            $(\"#\"+instanceId).append('<div class=\"buttonsWrapper\"></div>');\n            \n            if (plugin.settings.showCancel)\n            {\n                $(\"#\"+instanceId+\" .buttonsWrapper\").append('<button type=\"button\" class=\"cancelBtn\">' + plugin.settings.textCancel + '</button>');\n            }\n            \n            if (plugin.settings.showOk)\n            {\n                $(\"#\"+instanceId+\" .buttonsWrapper\").append('<button type=\"button\" class=\"okBtn\">' + plugin.settings.textOk + '</button>');\n            }\n            \n            $(\"#\"+instanceId).append('<div class=\"clear\"></div>');\n            \n            /**\n             * Update all color values from RGB values when dragging RGB sliders.\n             * Onchange and input events don't work yet on all browsers!\n             */\n            /*$(redSlider+\", \"+greenSlider+\", \"+blueSlider).mousedown(function () {\n                $(this).mousemove(function () {\n                    setRGB();\n                });\n            });*/\n            $(redSlider+\", \"+greenSlider+\", \"+blueSlider).bind(\"touchstart mousedown\", function () {\n                $(this).bind(\"touchmove mousemove\", function () {\n                    setRGB();\n                });\n            });\n            \n            /**\n             * Update all color values from HSL values when dragging HSL sliders.\n             * Onchange and input events don't work yet on all browsers!\n             */\n            /*$(hueSlider+\", \"+saturationSlider+\", \"+lightnessSlider).mousedown(function () {\n                $(this).mousemove(function () {\n                    setHSL();\n                });\n            });*/\n            $(hueSlider+\", \"+saturationSlider+\", \"+lightnessSlider).bind(\"touchstart mousedown\", function () {\n                $(this).bind(\"touchmove mousemove\", function () {\n                    setHSL();\n                });\n            });\n            \n            /**\n             * Unbind mousemove event hanlder from all sliders on mouseup.\n             */\n            /*$(\".slider\").mouseup(function () {\n                $(this).unbind('mousemove');\n            }).mouseout(function () {\n                $(this).unbind('mousemove');\n            });*/\n            $(redSlider+\", \"+greenSlider+\", \"+blueSlider).bind(\"touchend mouseup mouseout\", function () {\n                $(this).unbind(\"touchmove mousemove\");\n                //setRGB();\n            });\n            \n            $(hueSlider+\", \"+saturationSlider+\", \"+lightnessSlider).bind(\"touchend mouseup mouseout\", function () {\n                $(this).unbind(\"touchmove mousemove\");\n                //setHSL();\n            });\n            \n            /**\n             * Sets slider positions when rgb values are changed in the input fields\n             */\n            $('.colorValue').keyup(function() {\n                \n                var sliderId = $(this).attr(\"data-sliderId\");\n                \n                // Make sure only numbers are accepted\n                if (isNaN(this.value)) {\n                    this.value = $(\"#\"+instanceId+\" .\"+sliderId).val();\n                    return false;\n                }\n                \n                $(\"#\"+instanceId+\" .\"+sliderId).val(this.value);\n                \n                if (sliderId == 'r' || sliderId == 'g' || sliderId == 'b')\n                {\n                    setRGB();\n                }\n                else if (sliderId == 'h' || sliderId == 's' || sliderId == 'l')\n                {\n                    setHSL();\n                }\n                \n                return true;\n            });\n            \n            /**\n             * Set sliders and rgb/hsl values when hex value is changed\n             */\n            $(\"#\"+instanceId+\" .hexValue\").keyup(function() {\n                if (this.value.charAt(0) != '#') \n                {\n                    this.value = '#' + this.value;\n                }\n                \n                if (this.value.length == 7)\n                {   \n                    if (hexToRgb(this.value))\n                    {\n                        hex = this.value;\n                        var rgb = hexToRgb(this.value);\n                        r = rgb.r;\n                        g = rgb.g;\n                        b = rgb.b;\n                        setSliders();\n                        setRGB();\n                    }\n                    else\n                    {\n                        this.value = hex;\n                    }\n                }\n            });\n            \n            $(colorPickerWrapper).mousedown(function(e) {\n                picking = true;\n                pickColor(e, this);\n            });\n            \n            $(colorPickerWrapper).mousemove(function(e) {\n                if (picking == true)\n                {\n                    pickColor(e, this);\n                }\n            });\n            \n            $(colorPickerWrapper).bind('mouseup mouseleave', function(e) {\n                picking = false;\n            });\n            \n            // Put color value in the input\n            $(\"#\"+instanceId+\" .okBtn\").click(function() {\n                \n                if (plugin.settings.mode == \"rgb\")\n                {\n                    $element.val(\"rgb(\"+r+\", \"+g+\", \"+b+\")\");\n                }\n                else if (plugin.settings.mode == \"hex\")\n                {\n                    $element.val(\"#\"+hex);\n                }\n                else if (plugin.settings.mode == \"hsl\")\n                {\n                    $element.val(\"hsl(\"+h+\", \"+s+\"%, \"+l+\"%)\");\n                }\n                \n                // Execute custom onOk function if given\n                if (plugin.settings.onOk != null)\n                {\n                    plugin.settings.onOk();\n                }\n                \n                if (plugin.settings.closeOnOk == true)\n                {\n                    showHide();\n                }\n                \n                $(colorPickerIcon).css(\"background-color\", \"#\" + hex);\n            });\n            \n            // Cancel\n            $(\"#\"+instanceId+\" .cancelBtn\").click(function() {\n                \n                // Execute custom onCancel function if given\n                if (plugin.settings.onCancel != null)\n                {\n                    plugin.settings.onCancel();\n                }\n                \n                if (plugin.settings.closeOnCancel == true)\n                {\n                    showHide();\n                }\n            });\n            \n            $(window).scroll(function() {\n                if (plugin.settings.modal == true && plugin.settings.draggable == false)\n                {\n                    center();\n                }\n            });\n            \n            /**\n             * To keep the color indicator in the right place when resizing.\n             */\n            $(window).resize(function() {\n                setRGB();\n                if (plugin.settings.modal == true && plugin.settings.draggable == false)\n                {\n                    center();\n                }\n            });\n            \n            if (plugin.settings.clickToggle == true)\n            {\n                $element.click(function() {\n                    showHide();\n                });\n                \n                $(colorPickerIcon).click(function() {\n                    showHide();\n                });\n            }\n            \n            // Modal\n            if (plugin.settings.modal == true)\n            {\n                center();\n                $(\"body\").append('<div id=\"'+instanceId+'overlay\" class=\"colorpickleModalOverlay\"></div>');\n            }\n            \n            // Hide stuff according to custom settings\n            if (plugin.settings.showSwatch == false)\n            {\n                $(swatch).hide();\n            }\n            \n            if (! plugin.settings.showSLGradient)\n            {\n                $(colorPickerWrapper).hide();\n            }\n            \n            if (plugin.settings.rgbSliders == false)\n            {\n                $(rWrapper).hide();\n                $(gWrapper).hide();\n                $(bWrapper).hide();\n            }\n            \n            if (plugin.settings.hslSliders == false)\n            {\n                $(hWrapper).hide();\n                $(sWrapper).hide();\n                $(lWrapper).hide();\n            }\n            \n            if (plugin.settings.showHex == false)\n            {\n                $(\"#\"+instanceId+\" .hexValue\").hide();\n            }\n            \n            // Make room for buttons\n            if (plugin.settings.showCancel || plugin.settings.showOk) \n            {\n                $(\"#\"+instanceId).css(\"min-height\", ($(\"#\"+instanceId).height() + $(\"#\"+instanceId+\" .buttonsWrapper\").height() - parseInt($(\"#\"+instanceId).css(\"padding-bottom\"))) + \"px\");\n            }\n            \n            setRGB();\n            \n            $(colorPickerIcon).css(\"background-color\", \"#\" + hex);\n            \n            if (plugin.settings.visible == false)\n            {\n                $(\"#\"+instanceId).hide();\n            }\n            \n            // Call onInit if set\n            if ($.isFunction(plugin.settings.onInit))\n            {\n                plugin.settings.onInit();\n            }\n        }\n \n        /**\n         * Public methods\n         * Call from inside: plugin.methodName(arg1, arg2, ... argn)\n         * Call from outside: $(selector).colorpickle(\"methodName\", arg1, arg2, ... argn)\n         */\n        \n        /**\n         * Set Colorpickle current RGB value from outside\n         */\n        plugin.setRGB = function(r, g, b) {\n            $(redSlider).val(r);\n            $(greenSlider).val(g);\n            $(blueSlider).val(b);\n            setRGB();\n        };\n        \n        /**\n         * Set Colorpickle current HSL value from outside\n         */\n        plugin.setHSL = function(h, s, l) {\n            $(hueSlider).val(h);\n            $(saturationSlider).val(s);\n            $(lightnessSlider).val(l);\n            setHSL();\n        };\n        \n        /**\n         * Set Colorpickle current RGB hex value from outside\n         */\n        plugin.setHex = function(hex) {\n            var rgb = hexToRgb(hex);\n            $(redSlider).val(rgb.r);\n            $(greenSlider).val(rgb.g);\n            $(blueSlider).val(rgb.b);\n            setRGB();\n        };\n        \n        /**\n         * Private methods\n         * Call from inside only: methodName(arg1, arg2, ... argn)\n         */\n        \n        /**\n         * Creates a range input to control a color component\n         * r = Red, g = Green, b = Blue\n         * h = Hue, s = Saturation, l = Lightness\n         * \n         * @param   color   string\n         * @param   min     int\n         * @param   max     int\n         * @param   value   int\n         * \n         * @return void\n         */\n        var createSlider = function(color, min, max, value)\n        {   \n            var wrapperName = color + \"Wrapper\";\n            var unit = '';\n            \n            if (color == 'h')\n            {\n                unit = ' &deg;';\n            }\n            else if (color == 's' ||color == 'l')\n            {\n                unit = ' %';\n            }\n            \n            $(\"#\" + instanceId).append('<div class=\"sliderWrapper ' + wrapperName + '\"></div>');\n            $(\"#\" + instanceId + \" .\" + wrapperName).append('<label>' + color.toUpperCase() + ' ' + unit + '</label>');\n            $(\"#\" + instanceId + \" .\" + wrapperName).append('<div class=\"sliderBg\"></div>');\n            $(\"#\" + instanceId + \" .\" + wrapperName).append('<div class=\"sliderDiv\"><input type=\"range\" class=\"slider ' + color + '\" min=\"' + min + '\" max=\"' + max + '\" step=\"1\" value=\"' + value + '\" /></div>');\n            $(\"#\" + instanceId + \" .\" + wrapperName).append('<input type=\"text\" data-sliderId=\"' + color + '\" class=\"' + color + 'Input sliderValue colorValue\" value=\"0\" />');\n        };\n        \n        var setRGB = function()\n        {\n            r = parseInt($(redSlider).val());\n            g = parseInt($(greenSlider).val());\n            b = parseInt($(blueSlider).val());\n            \n            hsl = rgbToHsl(r, g, b);\n            h = Math.round(hsl[0]*360);\n            s = Math.round(hsl[1]*100);\n            l = Math.round(hsl[2]*100);\n            \n            setHex();\n            setSliders();\n            setFields();\n            setSliderBackgrounds();\n            setIndicator();\n        };\n        \n        var setHSL = function()\n        {\n            h = parseInt($(hueSlider).val());\n            s = parseInt($(saturationSlider).val());\n            l = parseInt($(lightnessSlider).val());\n            \n            var rgb = hslToRgb(h/360, s/100, l/100);\n            r = Math.round(rgb[0]);\n            g = Math.round(rgb[1]);\n            b = Math.round(rgb[2]);\n            \n            setHex();\n            setSliders();\n            setFields();\n            setSliderBackgrounds();\n            setIndicator();\n        };\n        \n        /**\n         * Sets hex value and updates swatch color.\n         * Also the public color properties are updated here.\n         *\n         * @return  void\n         */\n        var setHex = function()\n        {            \n            hex = rgbToHex(r, g, b);\n            $(swatch).css(\"background-color\", \"#\" + hex);\n            \n            var pickerRGB = hslToRgb(h/360, 1, 0.5);\n            var pickerR = Math.round(pickerRGB[0]);\n            var pickerG = Math.round(pickerRGB[1]);\n            var pickerB = Math.round(pickerRGB[2]);\n            \n            var pickerHex = rgbToHex(pickerR, pickerG, pickerB);\n            \n            $(colorPickerBg).css(\"background-color\", \"#\" + pickerHex);\n            \n            // Execute custom onChange function if given and the color has changed\n            if (plugin.settings.onChange != null && plugin.rgb != null && plugin.hex != '#' + hex)\n            {\n                plugin.settings.onChange();\n            }\n            \n            // Set public color properties\n            plugin.rgb = 'rgb(' + r + ',' + g + ',' + b + ')';\n            plugin.hsl = 'hsl(' + h + ',' + s + ',' + l + ')';\n            plugin.hex = '#' + hex;\n        };\n        \n        /**\n         * Converts a RGB color value to hex.\n         * \n         * @param   r   int\n         * @param   g   int\n         * @param   b   int\n         *\n         * @return  string\n         */\n        var rgbToHex = function(r, g, b)\n        {\n            var hex = [\n                r.toString(16),\n                g.toString(16),\n                b.toString(16)\n            ];\n            $.each(hex, function(nr, val) {\n                if (val.length === 1) {\n                    hex[ nr ] = \"0\" + val;\n                }\n            });\n            \n            return hex.join(\"\");\n        };\n        \n        /**\n         * Converts a hex color value to RGB.\n         */\n        var hexToRgb = function(hex)\n        {\n            var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n            return result ? {\n                r: parseInt(result[1], 16),\n                g: parseInt(result[2], 16),\n                b: parseInt(result[3], 16)\n            } : false;\n        };\n        \n        /**\n        * Converts an HSL color value to RGB.\n        * Conversion formula adapted from http://en.wikipedia.org/wiki/HSL_color_space.\n        * Assumes h, s, and l are contained in the set [0, 1] and\n        * returns r, g, and b in the set [0, 255].\n        *\n        * @param   Number  h       The hue\n        * @param   Number  s       The saturation\n        * @param   Number  l       The lightness\n        * @return  Array           The RGB representation\n        */\n        var hslToRgb = function(h, s, l){\n           var r, g, b;\n            \n           if(s == 0){\n               r = g = b = l; // achromatic\n           }else{\n               function hue2rgb(p, q, t){\n                   if(t < 0) t += 1;\n                   if(t > 1) t -= 1;\n                   if(t < 1/6) return p + (q - p) * 6 * t;\n                   if(t < 1/2) return q;\n                   if(t < 2/3) return p + (q - p) * (2/3 - t) * 6;\n                   return p;\n               }\n                \n               var q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n               var p = 2 * l - q;\n               r = hue2rgb(p, q, h + 1/3);\n               g = hue2rgb(p, q, h);\n               b = hue2rgb(p, q, h - 1/3);\n           }\n            \n           return [r * 255, g * 255, b * 255];\n        };\n        \n        /**\n        * Converts an RGB color value to HSL.\n        * Conversion formula adapted from http://en.wikipedia.org/wiki/HSL_color_space.\n        * Assumes r, g, and b are contained in the set [0, 255] and\n        * returns h, s, and l in the set [0, 1].\n        *\n        * @param   Number  r       The red color value\n        * @param   Number  g       The green color value\n        * @param   Number  b       The blue color value\n        * \n        * @return  Array           The HSL representation\n        */\n        var rgbToHsl = function(r, g, b)\n        {\n            r /= 255, g /= 255, b /= 255;\n            var max = Math.max(r, g, b), min = Math.min(r, g, b);\n            var h, s, l = (max + min) / 2;\n            \n           if(max == min){\n               h = s = 0; // achromatic\n           }else{\n               var d = max - min;\n               s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n               switch(max){\n                   case r: h = (g - b) / d + (g < b ? 6 : 0); break;\n                   case g: h = (b - r) / d + 2; break;\n                   case b: h = (r - g) / d + 4; break;\n               }\n               h /= 6;\n            }\n            \n            return [h, s, l];\n        };\n        \n        var hsv2hsl = function(a,b,c){return[a,b*c/((a=(2-b)*c)<1?a:2-a),a/2]};\n        var hsl2hsv = function(a,b,c){b*=c<.5?c:1-c;return[a,2*b/(c+b),c+b]};\n        \n        var getPos = function(obj)\n        {\n            var curleft = curtop = 0;\n            if (obj.offsetParent)\n            {\n                do {\n                    curleft += obj.offsetLeft;\n                    curtop += obj.offsetTop;\n                }\n                while (obj = obj.offsetParent);\n            }\n            return [curleft,curtop];\n        };\n        \n        var setFields = function()\n        {\n            $(rInput).val(r);\n            $(gInput).val(g);\n            $(bInput).val(b);\n            $(hInput).val(h);\n            $(sInput).val(s);\n            $(lInput).val(l);\n            $(\"#\"+instanceId+\" .hexValue\").val(\"#\" + hex);\n        };\n        \n        var setSliders = function()\n        {\n            $(redSlider).val(r);\n            $(greenSlider).val(g);\n            $(blueSlider).val(b);\n            $(hueSlider).val(h);\n            $(saturationSlider).val(s);\n            $(lightnessSlider).val(l);\n        };\n        \n        /**\n         * Sets slider background gradients\n         */\n        var setSliderBackgrounds = function()\n        {\n            var rStyle = 'background: -moz-linear-gradient(left, rgb(0,' + g + ',' + b + ') 0%, rgb(255,' + g + ',' + b + ') 100%);';\n            rStyle += 'background: -webkit-linear-gradient(left, rgb(0,' + g + ',' + b + ') 0%, rgb(255,' + g + ',' + b + ') 100%);';\n        \trStyle += 'background: linear-gradient(to right, rgb(0,' + g + ',' + b + ') 0%, rgb(255,' + g + ',' + b + ') 100%);';\n            \n            var gStyle = 'background: -moz-linear-gradient(left, rgb(' + r + ',0,' + b + ') 0%, rgb(' + r + ',255,' + b + ') 100%);';\n            gStyle += 'background: -webkit-linear-gradient(left, rgb(' + r + ',0,' + b + ') 0%, rgb(' + r + ',255,' + b + ') 100%);';\n        \tgStyle += 'background: linear-gradient(to right, rgb(' + r + ',0,' + b + ') 0%, rgb(' + r + ',255,' + b + ') 100%);'\n            \n            var bStyle = 'background: -moz-linear-gradient(left, rgb(' + r + ',' + g + ',0) 0%, rgb(' + r + ',' + g + ',255) 100%);';\n            bStyle += 'background: -webkit-linear-gradient(left, rgb(' + r + ',' + g + ',0) 0%, rgb(' + r + ',' + g + ',255) 100%);';\n        \tbStyle += 'background: linear-gradient(to right, rgb(' + r + ',' + g + ',0) 0%, rgb(' + r + ',' + g + ',255) 100%);';\n            \n            var lStyle = 'background: -moz-linear-gradient(left, #000 0%, hsl(' + h + ',' + s + '%,50%) 50%, #fff 100%);';\n            lStyle += 'background: -webkit-linear-gradient(left, #000 0%, hsl(' + h + ',' + s + '%,50%) 50%, #fff 100%);';\n        \tlStyle += 'background: linear-gradient(to right, #000 0%, hsl(' + h + ',' + s + '%,50%) 50%, #fff 100%);';\n            \n            var sStyle = 'background: -moz-linear-gradient(left, hsl(' + h + ',0%,' + l+ '%) 0%, hsl(' + h + ',100%,' + l+ '%) 100%);';\n            sStyle += 'background: -webkit-linear-gradient(left, hsl(' + h + ',0%,' + l+ '%) 0%, hsl(' + h + ',100%,' + l+ '%) 100%);';\n        \tsStyle += 'background: linear-gradient(to right, hsl(' + h + ',0%,' + l+ '%) 0%, hsl(' + h + ',100%,' + l+ '%) 100%);';\n            \n            $(redSliderBg).attr('style', rStyle);\n            $(greenSliderBg).attr('style', gStyle);\n            $(blueSliderBg).attr('style', bStyle);\n            $(lightnessSliderBg).attr('style', lStyle);\n            $(saturationSliderBg).attr('style', sStyle);\n            \n            /*$(redSliderBg).css('background', 'linear-gradient(to right, rgb(0,' + g + ',' + b + ') 0%, rgb(255,' + g + ',' + b + ') 100%)');\n            $(greenSliderBg).css('background', 'linear-gradient(to right, rgb(' + r + ',0,' + b + ') 0%, rgb(' + r + ',255,' + b + ') 100%)');\n            $(blueSliderBg).css('background', 'linear-gradient(to right, rgb(' + r + ',' + g + ',0) 0%, rgb(' + r + ',' + g + ',255) 100%)');\n            $(lightnessSliderBg).css('background', 'linear-gradient(to right, #000 0%, hsl(' + h + ',' + s + '%,50%) 50%, #fff 100%)');\n            $(saturationSliderBg).css('background', 'linear-gradient(to right, hsl(' + h + ',0%,' + l+ '%) 0%, hsl(' + h + ',100%,' + l+ '%) 100%)');*/\n        };\n        \n        /**\n         * Pick HSV color from mouse position on the picker\n         */\n        var pickColor =function(e, el)\n        {\n            var pos = getPos(el);\n            var x = e.pageX - pos[0];\n            var y = e.pageY - pos[1];\n            \n            $(colorPickerIndicator).css(\"left\", Math.ceil(x-$(colorPickerIndicator).outerWidth()/2));\n            $(colorPickerIndicator).css(\"top\", Math.ceil(y-$(colorPickerIndicator).outerHeight()/2));\n            \n            s = x / ($(colorPickerWrapper).width() / 100);\n            v = 100 - (y / ($(colorPickerWrapper).height() / 100));\n            \n            var hsl = hsv2hsl(h,(s/100),(v/100));\n            s = Math.round(hsl[1]*100);\n            l = Math.round(hsl[2]*100);\n            \n            $(saturationSlider).val(s);\n            $(lightnessSlider).val(l);\n            \n            setHSL();\n        };\n        \n        var setIndicator = function()\n        {\n            var hsv = hsl2hsv(h,(s/100),(l/100));\n            s = Math.round(hsv[1]*100);\n            v = Math.round(hsv[2]*100);\n            \n            var hMultiplier = ($(colorPickerWrapper).width() / 100);\n            var vMultiplier = ($(colorPickerWrapper).height() / 100);\n            \n            var x = Math.ceil((s*hMultiplier) - ($(colorPickerIndicator).outerWidth()/2));\n            var y = Math.ceil(($(colorPickerWrapper).height()-v*vMultiplier) - ($(colorPickerIndicator).outerHeight()/2));\n            \n            $(colorPickerIndicator).css(\"left\", x);\n            $(colorPickerIndicator).css(\"top\", y);\n        };\n        \n        var showHide = function()\n        {\n            // Center modal Colorpickle before opening\n            if (plugin.settings.modal == true)\n            {\n                if (! $(\"#\"+instanceId).is(\":visible\")) \n                {\n                    center();\n                } \n                \n                $(\"#\" + instanceId+\"overlay\").fadeToggle();\n            }\n            \n            $(\"#\"+instanceId).fadeToggle();\n        };\n        \n        /**\n         * Centers the Colorpickle in the browser window.\n         * \n         * @return  void\n         */\n        var center = function()\n        {\n            var x = ($(window).width() / 2) - ($(\"#\"+instanceId).width() / 2);\n            var y = ($(window).height() / 2) - ($(\"#\"+instanceId).height() / 2) + $(window).scrollTop();\n            \n            $(\"#\"+instanceId).css(\"position\", \"absolute\");\n            $(\"#\"+instanceId).css(\"top\", y+\"px\");\n            $(\"#\"+instanceId).css(\"left\", x+\"px\");\n        };\n        \n        // Call init!\n        plugin.init();\n    };\n \n    // Add the plugin to the jQuery.fn object\n    $.fn.colorpickle = function(options) {\n        \n        var args = arguments;\n        \n        // Iterate through the DOM elements we are attaching the plugin to\n        return this.each(function() {\n            \n            var instance = $(this).data('colorpickle');\n            \n            // If the plugin has not already been attached to the element\n            if (instance == undefined)\n            {\n                // Create a new instance of the plugin\n                // Pass the DOM element and the user-provided options as arguments\n                var plugin = new $.colorpickle(this, options);\n                \n                /* \n                 * Store a reference to the plugin object in the jQuery version of the element.\n                 * You can later access the plugin and its methods and properties like\n                 * element.data('colorpickle').publicMethod(arg1, arg2, ... argn) or\n                 * element.data('colorpickle').settings.propertyName\n                */\n                $(this).data('colorpickle', plugin);\n            }\n            else\n            {\n                // Plugin already attached, check if the parameter is a method...\n                if ($.isFunction(instance[options]))\n                {\n                    // Call the method\n                    instance[options].apply( instance, Array.prototype.slice.call( args, 1 ) );\n                    //return instance[options].apply( instance, Array.prototype.slice.call( args, 1 ) );\n                }\n            }\n        });\n    }\n}(jQuery, window, document));\n"],"file":"jquery.colorpickle.js"}